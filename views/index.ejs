<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>File Upload and Text Entry</title>
    <link rel="stylesheet" type="text/css" href="/main.css"/>
</head>
<body>
    <div class="container" id="container">
        <input id="fileInput" type="file" accept=".txt,.csv,.log,.json,.xml,.yaml,.yml,.md" />
        <input id="textInput" type="text" placeholder="Enter text here..." />
        <div id="message" style="display: none;">Received!</div>
        <div id="errorMessage" style="display: none;">0 errors detected</div>
        <button id="downloadBtn" style="display: none;">Download Normalized Log</button>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const textInput = document.getElementById('textInput');
            const fileInput = document.getElementById('fileInput');
            const message = document.getElementById('message');
            const errorMessage = document.getElementById('errorMessage');
            const downloadBtn = document.getElementById('downloadBtn');
            const container = document.getElementById('container');

            function showReceivedMessage(url, body) {
                container.style.transform = "translateY(-50px)";
                message.style.display = 'block';

                fetch(url, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify(body), 
                })
                    .then((response) => response.json())
                    .then((data) => {
                        errorMessage.textContent = `${data.errorCount} error(s) detected`;
                        errorMessage.style.display = 'block';
                    })
                    .catch((err) => {
                        console.error('Error:', err);
                        errorMessage.textContent = `Error: Unable to process input.`;
                        errorMessage.style.display = 'block';
                    });
            }

            textInput.addEventListener('keypress', function (event) {
                if (event.key === 'Enter') {
                    const text = textInput.value;
                    if (text.trim() === '') {
                        errorMessage.textContent = `Please enter valid text.`;
                        errorMessage.style.display = 'block';
                        return;
                    }
                    showReceivedMessage('/detect', { text });
                }
            });

            fileInput.addEventListener('change', function () {
                const file = fileInput.files[0];
                if (file) {
                    const formData = new FormData();
                    formData.append('file', file);

                    fetch('/detect-file', {
                        method: 'POST',
                        body: formData,
                    })
                        .then((response) => response.json())
                        .then((data) => {
                            errorMessage.textContent = `${data.errorCount} error(s) detected`;
                            errorMessage.style.display = 'block';

                            // Show button after file upload, even if no downloadPath
                            downloadBtn.style.display = 'inline-block';
                            downloadBtn.onclick = () => alert('This button is ready, but download logic has been removed.');
                        })
                        .catch((err) => {
                            console.error('Error:', err);
                            errorMessage.textContent = `Error: Unable to process file.`;
                            errorMessage.style.display = 'block';
                        });
                }
            });
        });
    </script>        
</body>
</html>